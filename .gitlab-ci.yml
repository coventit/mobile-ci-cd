stages:
  - tests
  - build
  - quality_gate
  - sign
  - prepare_release_info
  - release

workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "development"'
    - if: '$CI_COMMIT_BRANCH =~ /^release\//'
    - when: never

image: eclipse-temurin:17-jdk-jammy

# Download and install build dependencies for the android
.setup-build-deps:
  before_script:
    - apt-get --quiet update --yes
    - apt-get --quiet install --yes wget unzip
      # Set working directory for android sdk
    - export ANDROID_HOME="${PWD}/android-sdk-root"
    - install -d $ANDROID_HOME
      # Download android cmd tools
    - wget --no-verbose --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
    - unzip -q -d "$ANDROID_HOME/cmdline-tools" "$ANDROID_HOME/cmdline-tools.zip"
    - mv -T "$ANDROID_HOME/cmdline-tools/cmdline-tools" "$ANDROID_HOME/cmdline-tools/tools"
    - export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/cmdline-tools/tools/bin
      # Accept all Andoid SDK licenses
    - yes | sdkmanager --licenses > /dev/null || true
      # Install needed vervions of Android SDK and build tools
    - sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}"
    - sdkmanager "platform-tools"
    - sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}"

unit_tests:
  stage: tests
  extends: .setup-build-deps
  allow_failure: false
  script:
    - ./gradlew ${UNIT_TESTS}
  artifacts:
    paths:
      - app/build/test-results/**/TEST-*.xml
    reports:
      junit: app/build/test-results/**/TEST-*.xml

# build debug apk for tests and manual QA
build_app_debug:
  stage: build
  extends: .setup-build-deps
  script:
    - ./gradlew ${DEBUG_APP_BUILD}
  artifacts:
    paths:
     - app/build
  rules:
    - if: '$CI_COMMIT_BRANCH == "development"'

# build release apk for sign and release to play market  
build_app_release:
  stage: build
  extends: .setup-build-deps
  script:
    - ./gradlew  ${RELEASE_APP_BUILD}
  artifacts:
    paths:
     - app/build
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release\//'

# perform SAST analysis of the sources
sonarqube_analysis:
  stage: quality_gate
  image: sonarsource/sonar-scanner-cli:${SONAR_SCANNER_VER}
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  script:
      # perform analysis and wait for qualitygate check results
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=${CI_PROJECT_NAME} 
        -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN 
        -Dsonar.java.binaries=./app/build -Dsonar.sources=./app/src/main/java 
  # Stop pipeline if SonarQube qualitygate check failed
  allow_failure: false
  # publish artifacts if check was successful
  artifacts:
    paths:
     - app/build/outputs/apk
    expire_in: 1 week

# Sign release apk before publishing to the Play Store
sign_release_apk:
  stage: sign
  before_script:
    - apt-get -qqy update && apt-get -qqy install -y apksigner 
      # create keystore file from secret
    - echo $KEYSTORE_FILE | base64 -d > release-key.jks
  script:
    - apksigner sign --ks release-key.jks --ks-key-alias $KEY_ALIAS --ks-pass pass:$KEYSTORE_PASS --out app-release-signed.apk app/build/outputs/apk/release/app-release-unsigned.apk
  artifacts:
    paths:
      - app-release-signed.apk
  dependencies:
    - build_app_release
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release\//'

# Prepare release information, get version from the branch name
release_information:
  stage: prepare_release_info                                              
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release\//'
  needs:
    - job: sign_release_apk
      artifacts: true
  script:
    - echo "VERSION=${CI_COMMIT_BRANCH#release/}" >> release-info.env
  artifacts:
    paths:
      - app-release-signed.apk
    expire_in: 1 week
    reports:
      dotenv: release-info.env

release_to_playmarket:
  stage: release
  image: ruby:3.4.2-slim
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release\//'
      when: manual
  needs:
    - job: release_information
      artifacts: true
  # build native fastlane extention
  before_script:
    - apt-get -qqy update && apt-get -qqy install build-essential
    - gem install fastlane
  script:
    # release app to playmarket using 'release' lane
    - fastlane release

create_release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release\//'
      when: manual
  needs:
    - job: release_to_playmarket
      artifacts: true
  script:
    - echo "Creating release..."
  release:
    name: 'Release $VERSION'
    description: 'Release $VERSION'
    tag_name: '$VERSION'
